"""Init

Revision ID: 09a83ab985aa
Revises: 
Create Date: 2024-05-08 01:27:57.920219

"""
from datetime import datetime
from typing import Sequence, Union

import uuid
from alembic import op
import sqlalchemy as sa

from src.services.auth import auth_service
from src.conf.config import settings
# revision identifiers, used by Alembic.
revision: str = '09a83ab985aa'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    logs_table = op.create_table('logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('number', sa.String(length=50), nullable=True),
    sa.Column('start', sa.DateTime(timezone=True), nullable=True),
    sa.Column('stop', sa.DateTime(timezone=True), nullable=False),
    sa.Column('billcash', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('billbalance', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('discount', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    rates_table = op.create_table('rates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ratename', sa.String(length=50), nullable=True),
    sa.Column('price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('pricetime', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ratename')
    )
    user_type_table = op.create_table('user_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    ratestime_table = op.create_table('ratestime',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('monday', sa.Boolean(), nullable=False),
    sa.Column('tuesday', sa.Boolean(), nullable=False),
    sa.Column('wednesday', sa.Boolean(), nullable=False),
    sa.Column('thursday', sa.Boolean(), nullable=False),
    sa.Column('friday', sa.Boolean(), nullable=False),
    sa.Column('saturday', sa.Boolean(), nullable=False),
    sa.Column('sunday', sa.Boolean(), nullable=False),
    sa.Column('starttime', sa.Time(), nullable=True),
    sa.Column('stoptime', sa.Time(), nullable=True),
    sa.Column('rate_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['rate_id'], ['rates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    users_table = op.create_table('users',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('firstname', sa.String(length=50), nullable=True),
    sa.Column('lastname', sa.String(length=50), nullable=True),
    sa.Column('email', sa.String(length=150), nullable=False),
    sa.Column('mobilenamber', sa.String(length=15), nullable=True),
    sa.Column('databirthday', sa.DateTime(), nullable=True),
    sa.Column('password', sa.String(length=500), nullable=False),
    sa.Column('balance', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('notification', sa.Boolean(), nullable=True),
    sa.Column('avatar', sa.String(length=255), nullable=False),
    sa.Column('refresh_token', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('confirmed', sa.Boolean(), nullable=True),
    sa.Column('is_banned', sa.Boolean(), nullable=True),
    sa.Column('user_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_type_id'], ['user_type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    avto_table = op.create_table('avto',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('number', sa.String(length=50), nullable=True),
    sa.Column('color', sa.String(length=50), nullable=True),
    sa.Column('model', sa.String(length=50), nullable=True),
    sa.Column('is_banned', sa.Boolean(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
    op.bulk_insert(user_type_table, [
        {
            'id': 1,
            'type': "User",
        },
        {
            'id': 2,
            'type': 'Moderator',
        },
        {
            'id': 3,
            'type': 'Admin',
        }
    ])
    
    op.bulk_insert(users_table, [
        {
            'id': uuid.uuid4(),
            'firstname': "Admin",
            'email': "admin@admin.com",
            'avatar': "https://asset.cloudinary.com/di5efpq4c/a2755bed968acf16e0f3acacd7f2fe1f",  #avatar
            'password': auth_service.get_password_hash(settings.ADMIN_PASSWORD),
            'user_type_id': 3,
            'confirmed': True,
            'created_at': datetime.now()

        }
    ])

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('avto')
    op.drop_table('users')
    op.drop_table('ratestime')
    op.drop_table('user_type')
    op.drop_table('rates')
    op.drop_table('logs')
    # ### end Alembic commands ###
